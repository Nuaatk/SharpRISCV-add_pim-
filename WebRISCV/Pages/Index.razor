@page "/"
@using SharpRISCV.Core
@using System.Text;
@inject HttpClient Http
@inject ILogger<Index> Logger


<PageTitle>Index</PageTitle>

<h1>Welcome to SharpRISC-V</h1>

<p>
    SharpRISCV is an implementation of RISC-V assembly in C#. First RISC V Assembly that build windows executable file. <br />
    If you find the project helpful and informative, don’t forget to give it a star on <a href="https://github.com/rizwan3d/SharpRISCV" target="_blank">Github</a> to show your support.
</p>

<div class="row">
    <div class="col">
        Upload File (*.s) or Write code below. <br />
        <div class="input-group mb-3">
            <InputFile class="form-control" id="inputGroupFile02" OnChange="@LoadFiles" />
            <label class="input-group-text" for="inputGroupFile02">Upload</label>
        </div>
    </div>
    <div class="col text-end">
        <a class="btn btn-primary" @onclick="buildELF">Build Linux ELF</a>
        <a class="btn btn-primary" @onclick="buildPE">Build Windows PE</a>
        <a class="btn btn-primary" @onclick="buildHex">Build Hex</a>
        <a class="btn btn-primary" @onclick="build">Build Console</a>
    </div>
</div>

<div class="row h-100">
    <div class="col-6 h-100">
        <textarea class="form-control w-100 h-100" rows="10" cols="40" @bind="fileContent"></textarea>
    </div>
    <div class="col-6 h-100">
        <pre>
            @((MarkupString)(@output))
        </pre>
    </div>

</div>

<div class="row mt-5">
    <div class="col-12 text-center">
        <h2>Support</h2>
        <p>
            If you like SharpRISCV, you can support it:
        </p>
    </div>
    <div class="col-3">
    </div>
    <div class="col-3">
        <a href="https://www.buymeacoffee.com/rizwan3d" class="float-end">
            <img align="left" src="https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" height="50" width="210" alt="rizwan3d" />
        </a>
    </div>
    <div class="col-3">
        <a href="https://paypal.me/rizwan3d">
            <img align="left" src="https://img.shields.io/badge/PayPal-00457C?style=for-the-badge&logo=paypal&logoColor=white" height="50" width="210" alt="rizwan3d" />
        </a>
    </div>
</div>

@code {

    enum ByteType
    {
        ELF, PE, HEX
    }

    private string fileContent { get; set; } = "";
    private string output { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        fileContent = await Http.GetStringAsync("https://raw.githubusercontent.com/rizwan3d/SharpRISCV/master/Example/example.s").ConfigureAwait(false);
        StateHasChanged();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("addTooltips");
    }

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        var file = e.GetMultipleFiles(1)[0];
        using (var reader = new StreamReader(file.OpenReadStream()))
        {
            var fileContent = await reader.ReadToEndAsync();
            this.fileContent = fileContent;
            Logger.LogDebug(fileContent);
        }
        StateHasChanged();
    }

    private void build()
    {
        Address.SetAddress(0);
        RiscVAssembler.Assamble(fileContent);
        string output = "<span class='fs-5'>";
        output += $"-------------------------------------------------------------------------{Environment.NewLine}";
        output += $" Entry Address: {Address.EntryPointHax}{Environment.NewLine}";
        output += $"-------------------------------------------------------------------------{Environment.NewLine}";
        output += $" Address \t|\tHex Code\t|\tInstruction{Environment.NewLine}";
        output += $"-------------------------------------------------------------------------{Environment.NewLine}";

        foreach (var instruction in RiscVAssembler.Instruction)
        {
            if (instruction.InstructionType == InstructionType.Lable)
            {
                output += $"-------------------------------------------------------------------------{Environment.NewLine}";
                output += $" \t{instruction.Instruction}{Environment.NewLine}";
                continue;
            }
            instruction.MachineCode().ForEach(machineCode =>
            output += $" 0x{machineCode.Address:X8}\t|\t{machineCode.Hex}\t|\t{instruction.Instruction}{Environment.NewLine}");
        }
        output += $"-------------------------------------------------------------------------{Environment.NewLine}";
        output += $" Data Dump{Environment.NewLine}";
        output += $"-------------------------------------------------------------------------{Environment.NewLine}";
        foreach (var dump in DataSection.HexDum)
        {
            output += $" 0x{dump.Key}\t|\t0x{dump.Value}\t|\t{new string(dump.Value.HexToString().Reverse().ToArray())}{Environment.NewLine}";
        }
        output += $"-------------------------------------------------------------------------{Environment.NewLine}";
        output += $"</span>";

        this.output = output;
        StateHasChanged();
    }

    private void buildHex()
    {
        Address.SetAddress(0);
        RiscVAssembler.Assamble(fileContent);
        var hexcode = new SharpRISCV.Core.Hex.Compile("").BuildHexString();
        string output = "<span class='fs-5'>";
        output += $"Copy all the code below the spation line and paste it in Notepad, then save it as a .hex file.{Environment.NewLine}";
        output += $"-------------------------------------------------------------------------{Environment.NewLine}";
        output += hexcode;
        output += $"</span>";
        this.output = output;
        StateHasChanged();
    }

    private async void buildPE()
    {
        Address.SetAddress(0);
        RiscVAssembler.Assamble(fileContent);
        var finalData = new SharpRISCV.Core.Windows.Compile("").BuildPeNoCheckSum();
        var finalDataWithCheckSum = new SharpRISCV.Core.Windows.Compile("").AddCheckSumForWeb(finalData);
        string output = BytesConsoleOutputBuilder.Build(finalData);
        output = Highlight(output, ByteType.PE);
        this.output = $"<span class='fs-5'>RAW DUMP:{Environment.NewLine}</span>";
        this.output += output;
        await DownloadFile(finalDataWithCheckSum, OutputType.PE);
        StateHasChanged();
    }

    private async void buildELF()
    {
        Address.SetAddress(0);
        RiscVAssembler.Assamble(fileContent);
        var finalData = new SharpRISCV.Core.Elf.Compile("").bytes();
        string output = BytesConsoleOutputBuilder.Build(finalData);
        output = Highlight(output, ByteType.ELF);
        this.output = $"<span class='fs-5'>RAW DUMP:{Environment.NewLine}</span>";
        this.output += output;
        await DownloadFile(finalData.ToArray(), OutputType.ELF);
        StateHasChanged();
    }

    private async Task DownloadFile(byte[] data, OutputType outputType)
    {
        var base64 = Convert.ToBase64String(data);
        string ext = outputType == OutputType.ELF ? "elf" : "exe";
        string name = $"SharRISCV-{DateTime.Now:MM-dd-yyyy}.{ext}";
        await JSRuntime.InvokeVoidAsync("downloadFile", name, base64);
    }


    string Highlight(string hexDump, ByteType type)
    {
        var lines = hexDump.Split('\n', StringSplitOptions.RemoveEmptyEntries);

        var result = new StringBuilder();
        int address = 0;
        result.Append($"<span class='fs-5'>{lines[0]}</ span >").AppendLine();
        foreach (var line in lines[1..lines.Length])
        {
            var saddress = line[0..8];
            var bytespart = line[11..58];
            var ascii = line[61..line.Length];
            result.Append($"<span class='fs-5'>{saddress}   </span>");
            foreach (var byteStr in bytespart.Split(' '))
            {
                var highlightedByte = HighlightByte(byteStr, address, type);
                result.Append(highlightedByte).Append(' ');
                address++;
            }
            result.Append($"<span class='fs-5'>  {ascii}</span>");
            result.AppendLine();
        }

        return result.ToString();
    }

    int colorId = 0;
    int tipId = 0;
    static string[] colors = { "blue", "green", "black", "red" };
    CircularIdGenerator circularColors = new CircularIdGenerator(colors);
    static string[] elfTips = { 
        // ELF Header
        "EI_MAG", "EL_CLASS ", " EL_DATA", "EI_VERSION", "EI_OSABI", "EI_ABIVERSION", "EI_PAD", "e_type", "e_machine", "e_version","e_phoff","e_shoff","e_flags","e_ehsize","e_phentsize","e_phnum","e_shentsize","e_shnum","e_shstrndx",
        // Program header
        "","p_type","p_flags","p_offset","p_vaddr","p_paddr","p_filesz","p_memsz","p_flags","p_align","CODE",
    };
    CircularIdGenerator elfTipsGenerator = new CircularIdGenerator(elfTips);
    List<int> elfChnageAddress = new List<int>
    {
        // ELF Header
        0x03,0x04,0x05,0x06,0x07,0x08,0x0F,0x11,0x13,0x17,0x1F,0x27,0x2F,0x34,0x35,0x37,0x39,0x3B,0x3D,0x3F,
        // Program header
        0X40+0x03,0X40+0x07,0X40+0x0F,0X40+0x17,0X40+0x1F,0X40+0x27,0X40+0x2B,0X40+0x33,0X40+0x37
    };

    string HighlightByte(string byteStr, int address, ByteType type)
    {
        string color = "black";
        string tip = string.Empty;
        if (type == ByteType.ELF)
        {
            color = circularColors.Current;
            tip = elfTipsGenerator.Current;
            if (elfChnageAddress.Contains(address))
            {
                color = circularColors.GetNextId();
                tip = elfTipsGenerator.GetNextId();
            }
        }
        return $"<span style='color:{color}' class='fs-5' data-toggle='tooltip' data-placement='top' title='{tip} - Address: {address:X8}'>{byteStr}</span>";
    }
}

@inject IJSRuntime JSRuntime

<script>
    function addTooltips() {
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        })
    }
    window.downloadFile = (fileName, base64String) => {
        const byteCharacters = atob(base64String);
        const byteNumbers = new Array(byteCharacters.length);

        for (let i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }

        const byteArray = new Uint8Array(byteNumbers);
        const blob = new Blob([byteArray], { type: "application/octet-stream" });

        const link = document.createElement('a');
        link.href = window.URL.createObjectURL(blob);
        link.download = fileName;

        document.body.appendChild(link);
        link.click();

        document.body.removeChild(link);
    };
</script>