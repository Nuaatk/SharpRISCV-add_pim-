@page "/"
@using SharpRISCV.Core
@inject HttpClient Http
@inject ILogger<Index> Logger


<PageTitle>Index</PageTitle>

<h1>Welcome to SharpRISC-V</h1>

<p>SharpRISCV is an implementation of RISC-V assembly in C#. First RISC V Assembly that build windows executable file.</p>



<div class="row">
    <div class="col">
        Upload File (*.s) or Write code below. <br />
        <div class="input-group mb-3">
            <InputFile class="form-control" id="inputGroupFile02" OnChange="@LoadFiles" />
            <label class="input-group-text" for="inputGroupFile02">Upload</label>
        </div>
    </div>
    <div class="col text-end">
        <a class="btn btn-primary" @onclick="buildPE">Build Windows PE</a>
        <a class="btn btn-primary" @onclick="buildHex">Build Hex</a>
        <a class="btn btn-primary" @onclick="build">Build Console</a>
    </div>
</div>

<div class="row h-100">
    <div class="col h-100">
        <textarea class="form-control w-100 h-100" rows="10" cols="40" @bind="fileContent"></textarea>
    </div>
    <div class="col h-100">
        <textarea class="form-control w-100 h-100" rows="10" cols="40" @bind="output"></textarea>
    </div>

</div>

<div class="row mt-5">
    <div class="col-12 text-center">
        <h2>Support</h2>
        <p>
            If you like SharpRISCV, you can support it:
        </p>
    </div>
    <div class="col-3">
    </div>
    <div class="col-3">
        <a href="https://www.buymeacoffee.com/rizwan3d" class="float-end"> 
            <img align="left" src="https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" height="50" width="210" alt="rizwan3d" />
        </a>
    </div>
    <div class="col-3">
        <a href="https://paypal.me/rizwan3d">
            <img align="left" src="https://img.shields.io/badge/PayPal-00457C?style=for-the-badge&logo=paypal&logoColor=white" height="50" width="210" alt="rizwan3d" />
        </a>
    </div>
</div>

@code {
    private string fileContent { get; set; } = "";
    private string output { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        fileContent = await Http.GetStringAsync("https://raw.githubusercontent.com/rizwan3d/SharpRISCV/master/Example/example.s").ConfigureAwait(false);
        StateHasChanged();
    }


    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        var file = e.GetMultipleFiles(1)[0];
        using (var reader = new StreamReader(file.OpenReadStream()))
        {
            var fileContent = await reader.ReadToEndAsync();
            this.fileContent = fileContent;
            Logger.LogDebug(fileContent);
        }
        StateHasChanged();
    }

    private void build()
    {
        Address.SetAddress(0);
        RiscVAssembler.Assamble(fileContent);
        string output = string.Empty;
        output += $"-------------------------------------------------------------------------{Environment.NewLine}";
        output += $" Entry Address: {Address.EntryPointHax}{Environment.NewLine}";
        output += $"-------------------------------------------------------------------------{Environment.NewLine}";
        output += $" Address \t|\tHex Code\t|\tInstruction{Environment.NewLine}";
        output += $"-------------------------------------------------------------------------{Environment.NewLine}";

        foreach (var instruction in RiscVAssembler.Instruction)
        {
            if (instruction.InstructionType == InstructionType.Lable)
            {
                output += $"-------------------------------------------------------------------------{Environment.NewLine}";
                output += $" \t{instruction.Instruction}{Environment.NewLine}";
                continue;
            }
            instruction.MachineCode().ForEach(machineCode =>
            output += $" 0x{machineCode.Address:X8}\t|\t{machineCode.Hex}\t|\t{instruction.Instruction}{Environment.NewLine}");
        }
        output += $"-------------------------------------------------------------------------{Environment.NewLine}";
        output += $" Data Dump{Environment.NewLine}";
        output += $"-------------------------------------------------------------------------{Environment.NewLine}";
        foreach (var dump in DataSection.HexDum)
        {
            output += $" 0x{dump.Key}\t|\t0x{dump.Value}\t|\t{new string(dump.Value.HexToString().Reverse().ToArray())}{Environment.NewLine}";
        }
        output += $"-------------------------------------------------------------------------{Environment.NewLine}";

        this.output = output;
        StateHasChanged();
    }

    private void buildHex()
    {
        Address.SetAddress(0);
        RiscVAssembler.Assamble(fileContent);
        var hexcode = new SharpRISCV.Core.Hex.Compile("").BuildHexString();
        string output = string.Empty;
        output += $"Copy all the code below the spation line and paste it in Notepad, then save it as a .hex file.{ Environment.NewLine}";
        output += $"-------------------------------------------------------------------------{Environment.NewLine}";
        output += hexcode;
        this.output = output;
        StateHasChanged();
    }

    private async void buildPE()
    {
        Address.SetAddress(0);
        RiscVAssembler.Assamble(fileContent);
        var finalData = new SharpRISCV.Core.Windows.Compile("").BuildPeNoCheckSum();
        var finalDataWithCheckSum = new SharpRISCV.Core.Windows.Compile("").AddCheckSumForWeb(finalData);
        string output = string.Empty;
        output += $"Check You Download.{Environment.NewLine}";
        this.output = output;

        await DownloadFile(finalDataWithCheckSum);

        StateHasChanged();
    }

    private async Task DownloadFile(byte[] finalDataWithCheckSum)
    {
        var base64 = Convert.ToBase64String(finalDataWithCheckSum);
        await JSRuntime.InvokeVoidAsync("downloadFile", "risc-v.exe", base64);
    }
}

@inject IJSRuntime JSRuntime

<script>
    window.downloadFile = (fileName, base64String) => {
        const byteCharacters = atob(base64String);
        const byteNumbers = new Array(byteCharacters.length);

        for (let i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }

        const byteArray = new Uint8Array(byteNumbers);
        const blob = new Blob([byteArray], { type: "application/octet-stream" });

        const link = document.createElement('a');
        link.href = window.URL.createObjectURL(blob);
        link.download = fileName;

        document.body.appendChild(link);
        link.click();

        document.body.removeChild(link);
    };
</script>